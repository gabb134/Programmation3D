<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Vrilles sur la scène 3D par Gabriel Marrero</title>
    <link rel="stylesheet" type="text/css" href="StyleLabo9.css" />

    <script type="text/javascript" src="WebGl.js"></script>
    <script type="text/javascript" src="ShaderCouleurs.js"></script>
    <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="Transformations.js"></script>

    <script type="text/javascript">

        function demarrer() {
            const objCanvas = document.getElementById('monCanvas');
            const objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
            const objProgShaders = initShaders(objgl);
            const objScene3D = initScene3D(objgl); // Créer la scène

            effacerCanevas(objgl);
            dessiner(objgl, objProgShaders, objScene3D);
        }

        function initScene3D(objgl) {
            const objScene3D = new Object();
            const tabObjets3D = new Array();

            // La vrille non transformée
            let objet3D = new Object();
            objet3D.vertex = creerVrille(objgl);
            objet3D.couleurs = creerCouleursVrille(objgl);
            objet3D.transformations = creerTransformations();
            objet3D.maillage = null;
            tabObjets3D.push(objet3D);

            // AJOUTER D'AUTRES VRILLES ICI

            //Les 6 vrilles autour du milieu

            for (var iDegree = 0; iDegree <= 360; iDegree += 60) {
                let objet3D = new Object();

                objet3D.vertex = creerVrille(objgl);
                objet3D.couleurs = creerCouleursVrille(objgl);
                objet3D.transformations = creerTransformations();
                objet3D.maillage = null;
                setPositionX(2 * Math.cos(Math.PI / 180 * iDegree), objet3D.transformations); // A la gauche
                setPositionY(2 * Math.sin(Math.PI / 180 * iDegree), objet3D.transformations); // En haut
                //setAngleY(-90, objet3D.transformations); //Tourner autour de l'axe des X
                tabObjets3D.push(objet3D);
            }
            //Les 12 vrilles à l'extérieur

            for (var iDegree = 0; iDegree <= 360; iDegree += 30) {
                let objet3D = new Object();

                objet3D.vertex = creerVrille(objgl);
                objet3D.couleurs = creerCouleursVrille(objgl);
                objet3D.transformations = creerTransformations();
                objet3D.maillage = null;
                setPositionX(4 * Math.cos(Math.PI / 180 * iDegree), objet3D.transformations); // A la gauche
                setPositionY(4 * Math.sin(Math.PI / 180 * iDegree), objet3D.transformations); // En haut
                //setAngleY(-90, objet3D.transformations); //Tourner autour de l'axe des X
                tabObjets3D.push(objet3D);
            }



            // Mettre les objets 3D sur la scène
            objScene3D.tabObjets3D = tabObjets3D;

            return objScene3D;
        }

        function dessiner(objgl, objProgShaders, objScene3D) {
            // La vue
            objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

            // Matrice de projection
            const matProjection = mat4.create();
            mat4.ortho(-5, 5, -5, 5, -5, 5, matProjection);
            // Relier la matrice aux shaders
            objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

            for (let i = 0; i < objScene3D.tabObjets3D.length; i++) {
                const vertex = objScene3D.tabObjets3D[i].vertex;
                const couleurs = objScene3D.tabObjets3D[i].couleurs;
                const maillage = objScene3D.tabObjets3D[i].maillage;
                const transformations = objScene3D.tabObjets3D[i].transformations;

                // Matrice du modèle            
                const matModeleVue = mat4.create();
                mat4.identity(matModeleVue);
                // Appliquer les transformations sur le modèle 
                mat4.translate(matModeleVue, getPositionsXYZ(transformations));
                mat4.scale(matModeleVue, getEchellesXYZ(transformations));
                mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
                mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);
                mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

                // Relier la matrice aux shaders
                objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

                if (maillage == null)
                    // Dessiner les sous-objets
                    for (let j = 0; j < vertex.length; j++) {

                        // Relier les vertex aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                        objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                        const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                        // Relier les couleurs aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                        objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                        // Dessiner
                        objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                    }
                else { // Dessiner le maillage
                    // Relier les vertex aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                    objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                    // Relier les couleurs aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                    objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                    // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                    objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                    // Dessiner les triangles
                    objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                    // Dessiner les droites à la suite des triangles
                    objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
                }
            }
        }

        function effacerCanevas(objgl) {
            // Met la couleur d'effacement au noir et complétement opaque
            objgl.clearColor(0.0, 0.0, 0.0, 1.0);
            // Efface les couleurs et le buffer de profondeur.
            objgl.clear(objgl.COLOR_BUFFER_BIT | objgl.DEPTH_BUFFER_BIT);
        }

        function creerVrille(objgl) {
            const intNbCirconvolutions = 10;
            let tabVertex = [];
            for (let i = 0; i < 360 * intNbCirconvolutions; i++) {
                const fltRayon = i / (360 * intNbCirconvolutions);
                tabVertex = tabVertex.concat([Math.cos(i * Math.PI / 180) * fltRayon, Math.sin(i * Math.PI / 180) * fltRayon, fltRayon]);
            }

            const tabObjVrille = new Array();
            for (let i = 0; i < 1; i++) {
                tabObjVrille[i] = objgl.createBuffer();
                objgl.bindBuffer(objgl.ARRAY_BUFFER, tabObjVrille[i]);
                objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabVertex), objgl.STATIC_DRAW);
                tabObjVrille[i].typeDessin = objgl.LINE_STRIP;
            }

            return tabObjVrille;
        }

        function creerCouleursVrille(objgl) {
            let tabCouleurs = [];
            const intNbCirconvolutions = 10;
            for (let i = 0; i < 360 * intNbCirconvolutions; i++)
                tabCouleurs = tabCouleurs.concat([1.0, 1.0, 0.0, 1.0]); // jaune

            const tabObjCouleursVrille = new Array();
            for (let i = 0; i < 1; i++) {
                tabObjCouleursVrille[i] = objgl.createBuffer();
                objgl.bindBuffer(objgl.ARRAY_BUFFER, tabObjCouleursVrille[i]);
                objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabCouleurs), objgl.STATIC_DRAW);
            }
            return tabObjCouleursVrille;
        }

    </script>
</head>

<body onload="demarrer()">
    <header class="sTexteCentre sLargeurDiv sEntete">
        <p>
            <span class="sTitreApp">
                Vrilles sur la scène 3D<br />
            </span> par
            <span class="sAuteurApp">
                Gabriel Marrero
            </span>
        </p>
    </header>

    <main class="sLargeurDiv sCorps">
        <canvas id="monCanvas" width="640" height="640">
            Votre navigateur ne supporte pas la balise canvas
        </canvas>
    </main>

    <footer class="sLargeurDiv sPiedDePage">
        <p>
            <a href="http://www.cgodin.qc.ca">
                <img src="logoCGG.jpg" alt="logoCGG" />
            </a>
            <a href="http://www.cgodin.qc.ca/programme/techniques-informatique/">
                Département d'informatique du Cégep Gérald-Godin
            </a>
            <br />
            &copy; 2020
        </p>
    </footer>

</body>

</html>