<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>11-A-4 Dessiner cercle plein dégradé radial</title>
  
  <script type="text/javascript" src="WebGl.js"></script>
  <script type="text/javascript" src="ShaderCouleurs.js"></script>
  <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    
 <script type="text/javascript">
    
    function demarrer() {
      const objCanvas = document.getElementById('monCanvas');
      const objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
	  const objProgShaders = initShaders(objgl);
	  const objCercle = creerCercle(objgl);
	  const objCouleursCercle = creerCouleursCercle(objgl);
      
	  effacerCanevas(objgl);
	  dessiner(objgl, objProgShaders, objCercle, objCouleursCercle);
	  }

	  function dessiner(objgl, objProgShaders, objCercle, objCouleursCercle) {
          // La vue
          objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

          // Matrice de projection
          const matProjection = mat4.create();
          mat4.ortho(-2, 2, -2, 2, -5, 5, matProjection);
          // Relier la matrice aux shaders
          objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

          // Matrice du modèle
          const matModeleVue = mat4.create();
          mat4.identity(matModeleVue);
          // Relier la matrice aux shaders
          objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

          // Relier les vertex aux shaders
          objgl.bindBuffer(objgl.ARRAY_BUFFER, objCercle);
          objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
          const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

	      // Relier les couleurs aux shaders
          objgl.bindBuffer(objgl.ARRAY_BUFFER, objCouleursCercle);
          objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

	      // Dessiner le cercle
          objgl.drawArrays(objCercle.typeDessin, 0, intNbVertex);
      }  

    function effacerCanevas(objgl) {
      // Met la couleur d'effacement au noir et complétement opaque
      objgl.clearColor(0.0, 0.0, 0.0, 1.0);
      // Efface les couleurs et le buffer de profondeur.
      objgl.clear(objgl.COLOR_BUFFER_BIT|objgl.DEPTH_BUFFER_BIT);
    }

    function creerCercle(objgl) {
     const objCercle = objgl.createBuffer();
     let tabVertex = [0,0,0] // Le centre du cercle;
       for (let i = 0; i <= 360; i++) {
         tabVertex = tabVertex.concat([Math.cos(i*Math.PI/180),Math.sin(i*Math.PI/180),0.0]);
         //tabVertex = [...tabVertex, ...[Math.cos(i*Math.PI/180),Math.sin(i*Math.PI/180),0.0]];
     }
     objgl.bindBuffer(objgl.ARRAY_BUFFER, objCercle);
     objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabVertex), objgl.STATIC_DRAW);

     objCercle.typeDessin = objgl.TRIANGLE_FAN;

     return objCercle;
    }

    function creerCouleursCercle(objgl) {
        const objCouleursCercle = objgl.createBuffer();
        let tabCouleurs = [0.0, 0.0, 0.0, 1.0] // Le centre est noir opaque
        for (let i = 0; i <= 360; i++) { // Le reste est blanc opaque
            //tabCouleurs = tabCouleurs.concat([1.0, 1.0, 1.0, 1.0]);
            tabCouleurs = [...tabCouleurs, ...[1.0, 1.0, 1.0, 1.0]];
        }
        objgl.bindBuffer(objgl.ARRAY_BUFFER, objCouleursCercle);
        objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabCouleurs), objgl.STATIC_DRAW);

        return objCouleursCercle;
    }


</script>
</head>

<body onload="demarrer()"> 
	<canvas id="monCanvas" width="640" height="640">
		Votre navigateur ne supporte pas la balise canvas
	</canvas>
</body>
</html>