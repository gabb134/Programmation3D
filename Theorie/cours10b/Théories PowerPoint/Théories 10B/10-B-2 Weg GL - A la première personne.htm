<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>10-B-2 A la première personne.htm</title>
  
  <script type="text/javascript" src="WebGl.js"></script>
  <script type="text/javascript" src="ShaderCouleurs.js"></script>
  <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="Transformations.js"></script>
  <script type="text/javascript" src="Camera.js"></script>

 <script type="text/javascript">

let objgl = null;
let objProgShaders = null;
let objScene3D = null;

    function demarrer() {
      const objCanvas = document.getElementById('monCanvas');
       objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
       objProgShaders = initShaders(objgl);
       objScene3D = initScene3D(objgl); // Créer la scène
      
	  effacerCanevas(objgl);
	  dessiner(objgl, objProgShaders, objScene3D);
     }

     function initScene3D(objgl) {
         const objScene3D = new Object();
         const tabObjets3D = new Array();

         for (let i = 0; i < 10; i++) {
             // Créer 10 cubes
             const objet3D = new Object();
             objet3D.vertex = creerCube(objgl);
             objet3D.couleurs = creerCouleursCube(objgl);
			 objet3D.maillage = creerMaillageCube(objgl);
             objet3D.transformations = creerTransformations();
             setPositionX(-10 + Math.random() * 20, objet3D.transformations);
             setPositionY(-10 + Math.random() * 20, objet3D.transformations);
             setPositionZ(-10 + Math.random() * 20, objet3D.transformations);
             setAngleX(Math.random() * 360, objet3D.transformations);
             setAngleY(Math.random() * 360, objet3D.transformations);
             setAngleZ(Math.random() * 360, objet3D.transformations);
             tabObjets3D.push(objet3D);
         }

         // Mettre les objets 3D sur la scène
         objScene3D.tabObjets3D = tabObjets3D;

         // La caméra
         const camera = creerCamera();
         setPositionsCameraXYZ([0, 0, -20], camera);
         setCiblesCameraXYZ([0, 0, 0], camera);
         setOrientationsXYZ([0, 1, 0], camera);

         // Mettre la caméra sur la scène
         objScene3D.camera = camera;

         return objScene3D;
     }

      function dessiner(objgl, objProgShaders, objScene3D) {
          // La vue
          objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);
        
          // Matrice de projection (en perspective)
          const matProjection = mat4.create();
		  const fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;
          mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);          
		  // Relier la matrice aux shaders
          objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

          for (let i = 0; i < objScene3D.tabObjets3D.length; i++) {
              const vertex = objScene3D.tabObjets3D[i].vertex;
              const couleurs = objScene3D.tabObjets3D[i].couleurs;
              const maillage = objScene3D.tabObjets3D[i].maillage;
              const transformations = objScene3D.tabObjets3D[i].transformations;
  
              // Matrice du modèle            
              const matModeleVue = mat4.create();
              mat4.identity(matModeleVue);
			  			 
             // Placer la caméra sur la scène
              mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                          getCiblesCameraXYZ(objScene3D.camera),
                          getOrientationsXYZ(objScene3D.camera), 
                          matModeleVue);
 			  
              // Appliquer les transformations sur le modèle 
              mat4.translate(matModeleVue, getPositionsXYZ(transformations));
              mat4.scale(matModeleVue, getEchellesXYZ(transformations));
              mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
              mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180); 
              mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

              // Relier la matrice aux shaders
              objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

              if (maillage == null)
                  // Dessiner les sous-objets
                  for (let j = 0; j < vertex.length; j++) {

                      // Relier les vertex aux shaders
                      objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                      objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                      const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                      // Relier les couleurs aux shaders
                      objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                      objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                      // Dessiner
                      objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                  }
              else { // Dessiner le maillage
                  // Relier les vertex aux shaders
                  objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                  objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                  // Relier les couleurs aux shaders
                  objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                  objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                  // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                  objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                  // Dessiner les triangles
                  objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                  // Dessiner les droites à la suite des triangles
                  objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
              }
          }
      }
    function effacerCanevas(objgl) {
      // Met la couleur d'effacement au noir et complétement opaque
      objgl.clearColor(0.0, 0.0, 0.0, 1.0);
      // Efface les couleurs et le buffer de profondeur.
      objgl.clear(objgl.COLOR_BUFFER_BIT|objgl.DEPTH_BUFFER_BIT);
    }

    function creerCube(objgl) {
        const objCube = objgl.createBuffer();

        const tabVertex = [
             // Face avant (Z=1)
			  0.0, 0.0, 1.0,   // 0: Centre
              1.0, 1.0, 1.0,   // 1: Coin haut droit
              1.0, -1.0, 1.0,  // 2: Coin bas droit
             -1.0, -1.0, 1.0,  // 3: Coin bas gauche
              -1.0, 1.0, 1.0,  // 4: Coin haut gauche

              // Face arrière (Z=-1) 
              0.0, 0.0, -1.0,   // 5: Centre
              1.0, 1.0, -1.0,   // 6: Coin haut droit
              1.0, -1.0, -1.0,  // 7: Coin bas droit
             -1.0, -1.0, -1.0,  // 8: Coin bas gauche
              -1.0, 1.0, -1.0  // 9: Coin haut gauche
        ];

        objgl.bindBuffer(objgl.ARRAY_BUFFER, objCube);
        objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabVertex), objgl.STATIC_DRAW);
  
        return objCube;
    }

    // Couleurs des vertex
    function creerCouleursCube(objgl) {
        const objCouleursCube = objgl.createBuffer();

        // Face avant
        let tabCouleurs = [1.0, 1.0, 1.0, 1.0]; // Blanc 
        for (let i = 1; i <= 4; i++)
            tabCouleurs = tabCouleurs.concat([1.0, 0.0, 0.0, 1.0]); // Rouge

        // Face arrière
        tabCouleurs = tabCouleurs.concat([1.0, 1.0, 1.0, 1.0]); // Blanc 
        for (let i = 1; i <= 4; i++)
            tabCouleurs = tabCouleurs.concat([0.0, 1.0, 0.0, 1.0]); // Vert

        objgl.bindBuffer(objgl.ARRAY_BUFFER, objCouleursCube);
        objgl.bufferData(objgl.ARRAY_BUFFER, new Float32Array(tabCouleurs), objgl.STATIC_DRAW);

        return objCouleursCube;
    }

    // Le maillage de triangles
    function creerMaillageCube(objgl) {
        const objMaillageCube = objgl.createBuffer();
        // Le maillage                        
        const tabMaillageCube =
            [ // Les 4 triangles de la face avant
             0, 1, 2,
             0, 2, 3,
             0, 3, 4,
             0, 4, 1,
             // Les 4 triangles de la face arrière
             5, 6, 7,
             5, 7, 8,
             5, 8, 9,
             5, 9, 6,
             // Les 4 droites 
             1, 6,
             2, 7,
             3, 8,
             4, 9
            ];

        objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, objMaillageCube);
        objgl.bufferData(objgl.ELEMENT_ARRAY_BUFFER, new Uint16Array(tabMaillageCube), objgl.STATIC_DRAW);

        // Le nombre de triangles
        objMaillageCube.intNbTriangles = 8;
        // Le nombre de droites
        objMaillageCube.intNbDroites = 4;

        return objMaillageCube;
    }

    function deplacerCamera() {
        const camera = objScene3D.camera;
        let fltX;
        let fltZ;
        let intDirection;
        let fltAngle;
        let fltXPrime;
        let fltZPrime;
        let fltRayon;

        if (event.keyCode == 37 || event.keyCode == 39) {
            // 37:  Flèche-à-gauche; 39:Flèche-à-droite
            fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
             fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
             intDirection = (event.keyCode == 37) ? -1 : 1;
             fltAngle = intDirection * Math.PI / 90; // Tourner 2 degrés
             fltXPrime = fltX * Math.cos(fltAngle) - fltZ * Math.sin(fltAngle);
             fltZPrime = fltX * Math.sin(fltAngle) + fltZ * Math.cos(fltAngle);
            setCibleCameraX(getPositionCameraX(camera) + fltXPrime, camera);
            setCibleCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
        }
        else
            if (event.keyCode == 38 || event.keyCode == 40) {
            // 38:  Flèche-en-haut; 40:Flèche-en-bas
             fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
             fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
             fltRayon = Math.sqrt(fltX * fltX + fltZ * fltZ);
             intDirection = (event.keyCode == 38) ? 1 : -1;

             fltXPrime = intDirection * 0.2 * Math.cos(Math.acos(fltX / fltRayon));
             fltZPrime = intDirection * 0.2 * Math.sin(Math.asin(fltZ / fltRayon));

            setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
            setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
            setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
            setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
        }
        else
            if (event.keyCode == 33 || event.keyCode == 34) {
            // 33: Page Up; 34: Page Down
             intDirection = (event.keyCode == 33) ? 1 : -1;
            setCibleCameraY(getCibleCameraY(camera) + intDirection * 0.2, camera);
            setPositionCameraY(getPositionCameraY(camera) + intDirection * 0.2, camera);
        }

        effacerCanevas(objgl);
        dessiner(objgl, objProgShaders, objScene3D);
    }
  
</script>
</head>

<body onload="demarrer()"> 
	<canvas id="monCanvas" width="640" height="640" tabIndex="1" onkeydown="deplacerCamera(); return false">
		Votre navigateur ne supporte pas la balise canvas
	</canvas>
</body>
</html>